trigger: none

pr: none
pool:
  vmImage: ubuntu-latest

parameters:
- name: RepoName
  displayName: Repository Name
  type: string
  default: 'Test_Repo_$(Build.BuildId)'

stages:
  - stage: GitHub_API
    variables:
     - group: access-tokens
    jobs:
      - job: create_Repo
        steps:
        - checkout: self
          persistCredentials: true
          
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              echo '${{ parameters.RepoName }} is created'        
              echo $(my-name)

        - task: PythonScript@0
          displayName: Create Initials
          inputs:
            scriptSource: 'inline'
            script: |
              name="tf-deploy-crm-data-migration"
              myList = name.split("-")
              finalKeyword = ""
              for words in myList[1:]:
                  finalKeyword += words[0]
              print('##vso[task.setvariable variable=shortendName;]'+finalKeyword)
    
        - task: Bash@3
          displayName: Creating Empty Repository
          inputs:
            targetType: 'inline'
            script: |
              #!/bin/bash
              set -x
              curl -L -s -o ./jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x ./jq
              content=$( curl --location --request POST 'https://api.github.com/user/repos' --header 'Authorization: Bearer $(api-token)' --header 'Content-Type: application/json' --data-raw '{ "name": "${{ parameters.RepoName }}" } ' )
              clone_url_response= echo $content | jq .clone_url

              
        - task: PythonScript@0
          inputs:
            scriptSource: 'inline'
            script: |
              import os
              os.mkdir(os. getcwd()+"/Template-Repo/environments/")
            

        - task: PythonScript@0
          inputs:
            scriptSource: 'inline'
            script: |
              import os
              workingDirectory = os. getcwd()+"/Template-Repo/environments/"
              backendPath = workingDirectory + "sit"
              backendFile = 'backend.tf'
              os.mkdir(backendPath)
              if os.path.exists(os.path.join(backendPath, backendFile)):
                  print('file already exists')
              else: 
                  fp = open(os.path.join(backendPath, backendFile), 'x')
                  fp.close()
              envVarsFile = 'environment.tfvars'        
              if os.path.exists(os.path.join(backendPath, envVarsFile)):
                  print('file already exists')
              else:
                  fp = open(os.path.join(backendPath, envVarsFile), 'x')
                  fp.close()
              
              print(os.getcwd())


        - task: Bash@3
          displayName: Pushing Changes to the repository
          inputs:
            targetType: 'inline'
            script: |
              git config --global user.email "$(Build.RequestedForEmail)"
              git config --global user.name "$(Build.QueuedBy)"
              cd Template-Repo
              git init
              git add .
              git commit -m "Initialized a Terraform Template Repository"
              ls
              git branch -a
              git push --set-upstream https://$(api-token)@github.com/Harshwardhan-Deshmukh/${{ parameters.RepoName }}.git master
              git log -a
          
        
              
 