# Template to execute terraform init, validate, plan and apply

# variable enable_tf_state_locking(true/false) need to be defined before calling this template

parameters:
- name: tf_version
  type: string 
- name: tf_service_connection
  type: string 
- name: tf_env
  type: string 
- name: tf_subscription_id
  type: string
- name: appId
  type: string
- name: installationId
  type: string

steps:
- checkout: self
  persistCredentials: true

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform ${{ parameters.tf_version }}'
  inputs:
    terraformVersion: ${{ parameters.tf_version}}

- task: DownloadSecureFile@1
  name: ghAppKey
  displayName: 'Download GitHub App Private Key'
  inputs: 
    secureFile: 'asdaecomadopoc'

# Task to obtain a GitHub Installation Access Token using GitHub App private Key & JWT
- bash: |
    # Obtain a JWT using GitHub API with PEM as auth.
    echo "Getting GitHub App JWT"
    PEM=$( cat $(ghAppKey.secureFilePath) )
    GITHUB_APP_ID=${{ parameters.appId }} # Get the Github app id from the Organisation Settings.

    NOW=$( date +%s )
    IAT="${NOW}"

    # JWT expiration time has 10 minute maximum. Expire 9 minutes in the future.
    EXP=$((${NOW} + 540))

    HEADER_RAW='{"alg":"RS256"}'
    HEADER=$( echo -n "${HEADER_RAW}" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
    PAYLOAD_RAW='{"iat":'"${IAT}"',"exp":'"${EXP}"',"iss":'"${GITHUB_APP_ID}"'}'
    PAYLOAD=$( echo -n "${PAYLOAD_RAW}" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
    HEADER_PAYLOAD="${HEADER}"."${PAYLOAD}"
    SIGNATURE=$( openssl dgst -sha256 -sign <(echo -n "${PEM}") <(echo -n "${HEADER_PAYLOAD}") | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
    JWT="${HEADER_PAYLOAD}"."${SIGNATURE}"

    # Generate a new Installation Access Token using the JWT to authenticate to the API.
    echo "Generating new Installation Access Token for GitHub Auth."
    TOKEN=$(curl -X POST \
      -H "Authorization: Bearer $JWT" \
      -H "Accept: application/vnd.github+json" \
      https://api.github.com/app/installations/${{ parameters.installationId }}/access_tokens | jq -r '.token')

    # Change git config to replace a github uri with the required uri to use the new IAT.
    git config --global url."https://x-access-token:$TOKEN@github.com".insteadOf "https://github.com" # consider being more specific on URI to just TF modules
  displayName: 'Generate new Installation Access Token for GitHub'

- bash: |
    terraform fmt
    terraform init -backend=false
  displayName: 'Terraform init test'
  env: 
    TF_LOG: TRACE
  workingDirectory: tf-deploy

- script: |
    echo "##vso[task.setvariable variable=enable_tf_state_locking;]false"
  name: OverrideTFStateLocking
  displayName: Disable Terraform State locking for non main branches
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')

- task: AzureCLI@2
  displayName: Set Terraform environment variables
  inputs:
    azureSubscription: ${{ parameters.tf_service_connection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -eu
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]${{ parameters.tf_subscription_id }}"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
    addSpnToEnvironment: true

- task: AzureCLI@2
  displayName: Terraform init
  inputs:
    azureSubscription: ${{ parameters.tf_service_connection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -eux  # fail on error
      az --version
      az account show
      terraform init -backend-config=../environments/${{ parameters.tf_env }}/backend.tf \
        -backend-config=subscription_id=${{ parameters.tf_subscription_id }} \
        -backend-config=tenant_id=$tenantId \
        -backend-config=client_id=$servicePrincipalId \
        -backend-config=client_secret="$servicePrincipalKey"
    workingDirectory: 'tf-deploy'
    addSpnToEnvironment: true                  

- task: AzureCLI@2
  displayName: Terraform validate
  inputs:
    azureSubscription: ${{ parameters.tf_service_connection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -eux  # fail on error
      terraform validate
    workingDirectory: 'tf-deploy'
    addSpnToEnvironment: true 

- task: AzureCLI@2
  displayName: Terraform plan
  inputs:
    azureSubscription: ${{ parameters.tf_service_connection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -eux  # fail on error
      export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
      terraform plan --var-file="../environments/${{ parameters.tf_env }}/environment.tfvars" -out=tfplan.tfplan -lock=$(enable_tf_state_locking)
    workingDirectory: 'tf-deploy'
    addSpnToEnvironment: true

# - task: AzureCLI@2
#   displayName: Terraform apply
#   inputs:
#     azureSubscription: ${{ parameters.tf_service_connection }}
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       set -eux  # fail on error
#       export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
#       terraform apply --var-file=../environments/${{ parameters.tf_env }}/environment.tfvars --backend-config=../environments/${{ parameters.tf_env }}/backend.tf -input=false -auto-approve tfplan
#     workingDirectory: 'tf-deploy'
#     addSpnToEnvironment: true 
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) # only run for branch main if build is succeeding so far

